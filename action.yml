name: action-Ahk2Exe
description: Convert AutoHotkey scripts to executables with Ahk2Exe
author: tamo

inputs:
  ahk2exe:
    description: compiler
    required: false
    default: _ahktmp/Ahk2Exe.exe
  base:
    description: binary to embed
    required: false
    default: _ahktmp/AutoHotkey32.exe
  src:
    description: script
    required: false
    default: ""
  opt:
    description: other options for ahk2exe
    required: false
    default: ""
  tmpdir:
    description: folder to download zips in
    required: false
    default: _ahktmp
  taghead:
    description: beginning of tag for base
    required: false
    default: v2.

runs:
  using: composite
  steps:
    - name: Fetch executables
      shell: pwsh
      run: |
        function latesturl (${repo}, ${type}, ${taghead}) {
          curl -H "Accept: application/vnd.github.v3+json" --no-progress-meter "https://api.github.com/repos/${repo}/releases"
          | jq -r ('first(.[] | select(.tag_name | startswith("{0}"))) | .assets[] | select(.content_type == "{1}") | .browser_download_url' -f "${taghead}","${type}");
        }
        function fetchit (${url}, ${zip}) {
          if (!(Test-Path "${{ inputs.tmpdir }}")) {
            New-Item -Type Directory "${{ inputs.tmpdir }}";
          }
          Push-Location "${{ inputs.tmpdir }}";
          Write-Output "Download ${A2EURL}";
          curl -LJo "${zip}" "${url}";
          7z x "${zip}";
          Pop-Location;
        }
        foreach (${base} in ("${{ inputs.base }}" -split ",")) {
          if (Test-Path "${base}") {
            Write-Output "Found ${base}";
            continue;
          }
          if ((Test-Path "${{ inputs.tmpdir }}/ahk.zip") -and (Test-Path "${{ inputs.tmpdir }}/${base}")) {
            Write-Output "Found ${base} in ${{ inputs.tmpdir }}";
            continue;
          }
          ${AHKURL} = latesturl "AutoHotkey/AutoHotkey" "application/zip" "${{ inputs.taghead }}";
          Write-Output "Download ${AHKURL}";
          fetchit "${AHKURL}" "ahk.zip";
        }
        if (Test-Path "${{ inputs.ahk2exe }}") {
          Write-Output "Found ${{ inputs.ahk2exe }}";
        } elseif (Test-Path "${{ inputs.tmpdir }}/${{ inputs.ahk2exe }}") {
          Write-Output "Found ${{ inputs.ahk2exe }} in ${{ inputs.tmpdir }}";
        } else {
          ${A2EURL} = latesturl "AutoHotkey/Ahk2Exe" "application/x-zip-compressed" "Ahk2Exe";
          Write-Output "Download ${A2EURL}";
          fetchit "${A2EURL}" "a2e.zip";
        }
    - name: Examine files
      id: paths
      shell: pwsh
      run: |
        if (Test-Path "${{ inputs.ahk2exe }}") {
          Write-Output "${{ inputs.ahk2exe }} found";
          "AHK2EXE=${{ inputs.ahk2exe }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append;
        } elseif (Test-Path "${{ inputs.tmpdir }}/${{ inputs.ahk2exe }}") {
          Write-Output "${{ inputs.ahk2exe }} found in ${{ inputs.tmpdir }}";
          "AHK2EXE=${{ inputs.tmpdir }}/${{ inputs.ahk2exe }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append;
        } else {
          Write-Output "${{ inputs.ahk2exe }} not found";
          exit 1;
        }
        ${base_array} = @();
        foreach (${base} in ("${{ inputs.base }}" -split ",")) {
          if (Test-Path "${base}") {
            Write-Output "${base} found";
            ${base_array} += "${base}";
          } elseif (Test-Path "${{ inputs.tmpdir }}/${base}") {
            Write-Output "${base} found in ${{ inputs.tmpdir }}";
            ${base_array} += "${{ inputs.tmpdir }}/${base}";
          } else {
            Write-Output "${base} not found";
            exit 1;
          }
        }
        ${bases} = ${base_array} -join ",";
        "BASES=${bases}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append;
    - name: Build
      if: inputs.src != ''
      shell: pwsh
      env:
        AHK2EXE: ${{ steps.paths.outputs.AHK2EXE }}
        BASES: ${{ steps.paths.outputs.BASES }}
      run: |
        ${bases} = ("${env:BASES}" -split ",");
        ${needs_suffix} = ${bases}.count -gt 1;
        foreach (${base} in ${bases}) {
          ${out_suffix} = "";
          if (${needs_suffix} -and ((Split-Path "${base}" -LeafBase) -match "[UA]?(32|64)$")) {
            ${out_suffix} = ${Matches}.0;
          }
          foreach (${src} in ("${{ inputs.src }}" -split ",")) {
            ${src_path} = Split-Path "${src}";
            if ("${src_path}" -eq "") {
              ${src_path} = ".";
            }
            ${src_leafbase} = Split-Path "${src}" -LeafBase;
            ${out} = "${src_path}/${src_leafbase}${out_suffix}.exe";
            & (Get-ChildItem "${env:AHK2EXE}") /silent verbose /base "${base}" /in "${src}" /out "${out}" ${{ inputs.opt }} | Out-Host;
            Write-Output "exit code is $LASTEXITCODE";
          }
        }
