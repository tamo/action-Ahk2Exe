name: Ahk2Exe v2 scripts
description: Convert AutoHotkey v2 scripts to executables with Ahk2Exe
author: tamo

inputs:
  ahk2exe:
    description: compiler
    required: false
    default: _ahktmp/Ahk2Exe.exe
  base:
    description: binary to embed
    required: false
    default: _ahktmp/AutoHotkey32.exe
  src:
    description: script
    required: false
    default: ""
  opt:
    description: other options for ahk2exe
    required: false
    default: ""
  tmpdir:
    description: folder to download zips in
    required: false
    default: _ahktmp

runs:
  using: composite
  steps:
    - name: Fetch executables
      shell: pwsh
      run: |
        function latesturl ($repo, $type, $taghead) {
          curl -H "Accept: application/vnd.github.v3+json" --no-progress-meter "https://api.github.com/repos/${repo}/releases/latest"
          | jq -r ('first(.[] | select(.tag_name | startswith("{0}"))) | .assets[] | select(.content_type == "{1}") | .browser_download_url' -f "${taghead}","${type}");
        }
        function fetchit ($url, $zip, $file) {
          if (!(Test-Path "${{ inputs.tmpdir }}")) {
            New-Item -Type Directory "${{ inputs.tmpdir }}";
          }
          Push-Location "${{ inputs.tmpdir }}";
          curl -LJo "${zip}" "${url}";
          7z x "${zip}";
          Pop-Location;
          if (!(Test-Path "${file}")) {
            Copy-Item "${{ inputs.tmpdir }}/${file}" "${file}";
          }
        }
        if (Test-Path "${{ inputs.ahk2exe }}") {
          Write-Output "Ahk2Exe is already here";
        } else {
          $A2EURL = latesturl "AutoHotkey/Ahk2Exe" "application/x-zip-compressed" "v2.";
          Write-Output "fetch ${A2EURL}";
          fetchit "${A2EURL}" "a2e.zip" "${{ inputs.ahk2exe }}";
        }
        if (Test-Path "${{ inputs.base }}") {
          Write-Output "Base binary is already here";
        } else {
          $AHKURL = latesturl "AutoHotkey/AutoHotkey" "application/zip" "Ahk2Exe";
          Write-Output "fetch ${AHKURL}";
          fetchit "${AHKURL}" "ahk.zip" "${{ inputs.base }}";
        }
        if (!(Test-Path "${{ inputs.ahk2exe }}") -or !(Test-Path "${{ inputs.base }}")) {
          Write-Output "Something failed";
          exit 1;
        }
    - name: Build
      if: inputs.src != ''
      shell: pwsh
      run: |
        & (Get-ChildItem "${{ inputs.ahk2exe }}") /silent verbose /base "${{ inputs.base }}" /in "${{ inputs.src }}" ${{ inputs.opt }} | Out-Host;
        Write-Output "exit code is $LASTEXITCODE";
